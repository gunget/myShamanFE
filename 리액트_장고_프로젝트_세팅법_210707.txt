리액트 장고 프로젝트 세팅 방법 (210529현재)

1. 장고 프로젝트 세팅하기
1) 프로젝트 설치후 기본 설정
- python, github, vscode 설치
- vscode설치후 : ctrl + shift + p -> Terminal: Select Default Shell -> Git Bash
 . 터미널을 gitbash로 띄우기
 . extensions에 python_VScode설치
- 프로젝트 폴더 생성 - 해당폴더로 이동 - 터미널실행 후 파이썬 정상설치 확인
 . python --version
 . window10에서 permission denided 나오면: 설정-앱-앱 실행 별칭 관리 - python관련 관리자 둘 Off
- python -m venv myvenv : 가상환경 생성하기
 . source myvenv/Scripts/activate : 가상환경 실행하기
- pip install django : 장고 설치하기
 . python -m pip install --upgrade pip : pip 업그레이드 하기
- django-admin startproject **project : 프로젝트 만들기
 . cd **project  // python manage.py runserver : 서버 정상실행 확인하기
 . ctrl+c : 서버실행 종료
- setting.py 변경하기 (secret키 변경 등)
 . (manage.py가 있는 위치에서) touch my_setting.py : 내 설정파일 만들기
 . SECRET_KEY = '~~~.' : settings.py의 secret_key부분 분리 (DB, LocalHoset도 분리 추천)
 . setting.py파일에 아래처럼 입력
   import my_settings
   SECRET_KEY = my_settings.SECRET_KEY
 . LANGUAGE_CODE = 'ko-kr' : 한국기준으로 설정 변경
   TIME_ZONE = 'Asia/Seoul'
   USE_TZ = False
 . STATIC_ROOT = os.path.join(BASE_DIR, 'static') : static파일의 기본 위치 설정
 . media를 별도로 사용 시 해당 설정 추가(https://roseline124.github.io/django/2019/03/27/pickmeal-media.html) 참고
   settings.py에 mediaURL설정 : MEDIA_URL = '/media/', MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
   url.py에 static(~~)추가: urlpatterns + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
   (from django.conf.urls.static import static, from django.conf import settings 필요)
   해당 모델에 설정 추가 : photo = models.ImageField(upload_to="reviewBoard/images", blank=True)
- (manage.py가 있는 위치에서) touch .gitignore : git에 올리지 않을 파일 생성
 .### Django ### : 보통 이정도는 기본으로 넣는다고 함
  *.log
  *.pot
  *.pyc
  __pycache__/
  local_settings.py
  db.sqlite3
  db.sqlite3-journal
  media
  my_setting.py //별도 추가한 설정
- pip freeze / pip freeze > requirements.txt  : git clone을 위해 dependancy 기록해줌
- python manage.py migrate 최초 DB설정

2)앱 만든 후 기본 설정
- python manage.py startapp **app : 앱만들기
 . setting.
- python manage.py createsuperuser : 관리자 계정 생성
 . Username (leave blank to use 'user'): admin
   Email address: rlagowns5885@naver.com
   Password: 
   Password (again): 
 . test용으로는 id:travis, pw:djg12345사용
- 앱생성 후 default DB생성 : 최초 모델생성없이 한번은 해줘야 SQLite가 설치된다.
 . python manage.py makemigrations : DB변경사항 정리
 . python manage.py migrate : DB에 적용
 . 모델에 변경사항이 생기면 할때마다 위 과정을 반복해야 한다.
 . cf. DB초기화 하기:
   rm -f db.sqlite3 //DB지우기
   rm -r movieDrtr/migrations //앱이름 아래있는 DB변경사항들 지우기
   python manage.py makemigrations movieDrtr //새로운 DB를 설치하고 변경사항 기록 위치를 지정하기
   python manage.py migrate // 변경사항 최종 설치하기
- 사용할 모델 생성 
 . admin.py에 어드민에서 보일 사이트 등록(여러개의 모델을 등록할 경우 [ ]사용 필!)
- settings.py - Installed_apps에 앱등록: 'Fbooks.apps.FbooksConfig'
- 처리할 view생성 및 Urlconf 지정
2-1) Django Restful framework사용 시 필요사항
- restFramework설치 - pip install djangorestframework - setting_installed앱에 추가, 'rest_framework',
- CORS(Cross-Origin Resource Sharing)설치로 다른포트를 사용하는 프론트 서버와 붙을 수 있도록 설정
. pip install django-cors-headers
. settings.py에 설정 추가
  INSTALLED_APPS = [ ...  'corsheaders', ]
  IDDLEWARE = [ 'corsheaders.middleware.CorsMiddleware',  ...] //제일 위로 올릴 것
  CORS_ORIGIN_WHITELIST = (  'http://localhost:3000',   'http://127.0.0.1:3000' ) 개별적으로 원하는 도메인 추가
  CORS_ORIGIN_ALLOW_ALL = True, CORS_ALLOW_CREDENTIALS = True 그냥 전체 도메인을 추가 시
- 모델 설정
. Nth depth를 갖는 객체 설정시 1차 모델에 2차모델이 Foreign키로 연결되는 형태를 가져야함
 ..이때 2차 모델은 1차모델에 대한 foreign키 설정을 가지지만 1차모델은 2차모델을 모르는 형태로 기록
- serializer.py 작성:api로 호출하기 위해 모델을 serialize해야 함
 . Nth객체 설정 시, 1차 모델에 삽입할 내용을 기록해줘야 함. 이때 2차 모델에 설정해뒀던 related_name을 컬럼명으로
  반드시 사용해야 함!!!
- 완성후 view설정(serilaizer클래스 설정) 및 url설정(router를 사용해 설정)
 
2. 리액트를 프론트로 사용하기
1) 개발단계에서 프론트로 사용하기 위해 설정하기
(https://justmakeyourself.tistory.com/entry/django-connect-react 참고)
(https://junlab.tistory.com/187참고)
- CORS패키지 설치 및 setting.py수정(전단계에서 했던 내용)
- 리액트 앱을 build : npm run build -> build폴더에 배포용 파일이 만들어짐
- 리액트 package.json에 proxy추가("proxy": "http://localhost:8000",) 프론트에서도 3000번에 url이 없을시 8000번으로 연결됨
- 이 빌드된 파일(static파일)을 장고가 볼 수 있도록 장고 세팅
 . path("", views.ReactAppView.as_view()): 루트 url 추가(바로 보이도록)
 . 해당 뷰를 만들어 줌. 요청이 들어오면 HttpResponse로 프론트에서 빌드한 index.html을 리턴하는 뷰.
 . setting.py에 statcfile(js css등)을 어디서 가져올 건지 지정해야 함
   STATICFILES_DIRS = [ str(ROOT_DIR.path('front', 'build', 'static')),	# 추가
- 이렇게 하면 장고(8000번)를 열면 빌드된 리액트의 프론트 단이 보임
2) 배포단계에서 프론트로 사용하기 위해 설정하기
- 기본 개념은 동일. 차이라면, 빌드된 파일을 장고의 특정 폴더로 옮기고 setting에서 template와 staticfiles_url을 해당 위치로
옮겨주면 됨.
- 이후 실제 배포는 장고의 배포 절차를 따라가면 될 듯
3) React에서 DRF에 CRUD하기
- Axios를 통해 간단하게 구현할 수 있음 : npm install axios 후 사용할 jsx에서 import axios from "axios";
- 참고할 건, 여기서 url을 보통 '개발용 서버용'으로 하드코딩하게 되는데, 이렇게 해 놓으면 추후 실제 배포시
  일일이 찾아서 '배포용 서버명'으로 바꿔줘야한다. 이런 번거로움을 줄이려면 별도의 파일로 주소를 뺀후
  템플릿리터럴에서 이걸 호출하는 형식으로 애초에 작업해놓는게 좋다.
 .  const response = await axios.get("http://127.0.0.1:8000/api/fbooks");를
    const response = await axios.get(`http://${serverURL}/api/fbooks`);로
- get //fetch와 다르게 axios가 JSON.parse작업을 다 처리해줌. 로그로 찍어가면서 필요한 값만 받아오면 된다.
  const response = await axios.get("http://127.0.0.1:8000/api/fbooks");
  const fbFromDJG = await response.data[0];
- delete//각 아이템은 자동으로 주어진 id값에따라 별도의 url을 갖는다(ex /api/users/1). 이걸 접근해서 지워줌
  axios.delete(`http://localhost:8000/api/users/${itemRef.current.dataset.id}/`);
- post// 
  axios.post("http://127.0.0.1:8000/api/users/", {
        name: nameRef.current.value,
        number: numberRef.current.value,
        fbooks: 2, //api/users/1을 DRF상에 나타나는 모든 변수를 등록해줘야 함(자동생성되는 id는 제외) 
      });
- update// 마찬가지로 post를 이용. 이때 해당 id가 필요.
   axios.put(`http://localhost:8000/api/users/${itemRef.current.dataset.id}/`, {
        name: input.name,
        number: input.number,
        fbooks: 2, //반드시 DRF API상의 변수와 값을 맞춰줘야 한다. 틀리면 어디에 넣을지 모르므로
      });
4) 로그인(인증작업 만들기)
4-1)로그인용 리액트페이지 만들기
- material UI에서 제공하는 기본 템플릿 활용, SignIn과 SignUp 컴포넌트 작성
- npm install react-router-dom 설치,
  App.js로 가서 import { Route, BrowserRouter as Router, Switch } from "react-router-dom";
  <Router>로 감싸고 그 안에 <Route path="url" component={띄울컴포넌트}>삽입. 간단하게 상호간 라우팅 됨
  해당 컴포넌트에서 바로 다른 경로로 이동하고 싶다면 <Link>를 사용(html의 a태그 기능)
- signIn 후  history.push로 이동시키는데 이때 인증되었다는 정보를 함께 넘길것
        .then((res) => {
          history.push({
            pathname: "/Home",
            state: { isAuthenticated: true, username: nameRef.current.value }, //jwt활용시 수정필요
          });
- signIn컴포넌트 렌더링 부분에서 CSSBaselien 컴포넌트 뺄 것. 랜딩페이지로 이동시 기본 css적용 방해.
- url에서 바로 직접쳐서 랜딩페이지로 접근하는 것을 막기위해, restirectedRoute라는 컴포넌트를 만들고 인증이 되었다면 랜딩
페이지로 이동시킬 것. 이때 signIn에서 받은 인증정보를 활용. location.state.isAuthenticated.
4-2)django인증 기능 구현
- pip install django-rest-auth, pip install django-allauth설치 및 관련세팅. 링크의 설명 참조.
 . https://freekim.tistory.com/8?category=887076
 . https://junlab.tistory.com/214
- django-rest-auth와 djang-allauth설치
. settings-installed app에 관련내용 추가
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'rest_auth.registration',
    'allauth.socialaccount',
. site Id=1추가
. ACCOUNT_EMAIL_REQUIRED = False
 ACCOUNT_EMAIL_VERIFICATION = "none"
 ACCOUNT_LOGOUT_ON_GET = True
 이것도 추가하지 않으면, 이메일 검증을 통과못해 window10071 에러발생

- 서버 실행한 뒤, 각종 end point가 정상적으로 동작하는지 확인
5) JWT적용하기
- jwt를 localstorage에 저장할거냐, cookie에 저장할거냐에 관한 이슈 있음. 전자에 하면 XSS라는 공격에, 후자에 하면
  CORS라는 공격에 취약하다 함. XSS는 리액트가 기본적으로 막아주니 localstorage에 저장하는 방법 선택. 여전히 
 token에 접근할 수 있다는 위험성은 있음. 중요한 서비스의 경우 state에 저장하고 새로고침 시 없어지도록 하는 방식이
 최선이라고 함. 실제 은행에서 이 방식을 사용 중이라고.
5-1)djago에 jwt 적용하기
- pip install djangorestframework-jwt 설치: 기존의 drf말고 추가로 설치해야함
- setting.py에 관련 설정 추가
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', 기존 drf의 token을 사용 안하겠다는 의미로 주석처리
        # 'rest_framework.authentication.BasicAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_ALLOW_REFRESH': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=1),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=1),
}
REST_USE_JWT = True
- url.py수정. jwt발행 및 갱신관련 url 추가
. from rest_framework_jwt.views import obtain_jwt_token, refresh_jwt_token, verify_jwt_token
.   path('api-jwt-auth/', obtain_jwt_token),          # JWT 토큰 획득
    path('api-jwt-auth/refresh/', refresh_jwt_token), # JWT 토큰 갱신
    path('api-jwt-auth/verify/', verify_jwt_token),   # JWT 토큰 확인
5-2)react에 jwt적용하기
- 서버와 데이터를 주고 받는 모든 장소에 jwt를 헤더에 삽입해서 보내줘야함
- signIn
        axios
        .post("http://127.0.0.1:8000/api-jwt-auth/", data) //인증 토큰 받기
        .then((response) => {
          return response.data; //리턴값이 다음 then으로 넘겨짐
        })
        .then((data) => {
          // console.log("새jwt:", data);
          localStorage.setItem("jwt", JSON.stringify(data)); //받은 토큰을 localStorage에 저장
          return data;
        })
        .then((data) => {
          history.push({
            pathname: "/Home",
            state: { isAuthenticated: true, username: nameFromServer },
          }); //인증완료 정보 등과 함께 landing page로 push
          return data;
        })
- 예시. 서버에서 데이터 받아오기(get)
  const jwt = JSON.parse(localStorage.getItem("jwt"));
  const config = {
    headers: {
      Authorization: `jwt ${jwt.token}`, // 토큰 삽입
    },
  };

  const fetchDirectorInfo = () => {
    axios
      .get("http://localhost:8000/api/directorInfo/", config) //토큰을 집어넣어 자료요청함
      .then((res) => {
        dispatch({ type: "SET_DRT_INIT_DATA", payload: res.data });
      })
      .then(() => {
        dispatch({ type: "DRT_INIT_LOADING_TOGGLE", payload: false });
      })
      .catch((error) => {
        console.log("DB에러:", error);
      });
  };
. 토큰을 state에 저장하려면 useFetch 안에서 useEffect사용. 이 경우 페이지 reload하면 jwt사라짐
  useEffect(() => {
    dispatch({ type: "SET_JWT", payload: jwt }); //받아온 토큰을 state에 저장. 딱 한번만 하려고 useEffect사용.
  }, []);
- 예시2, 데이터가 있을 경우. axios(url, data, config)순으로 보내야 한다. Post에서도 마찬가지.
  const config = {
    headers: {
      Authorization: `jwt ${states.jwt.token}`,
    },
  };
  const getPeopleCode = async (e) => {
    e.preventDefault();
    setPeopleCode("Now Searching...");
    await axios
      .get(
        "http://127.0.0.1:8000/getPpMovie/",
        {
          params: {
            searchDrt: inputRef.current.value,
          },
        },
        config
      )
6)사용자별 DB내용 표출 방법
- 기본 개념은 각 DB에 owner필드를 추가하고 이것을 기준으로 필터하여 get request에 응답으로 보내는 방식
- 참고: https://www.django-rest-framework.org/tutorial/4-authentication-and-permissions/
6-1)모델 수정
- 모델에 owner필드 생성 및 장고가 제공하는 User DB와 연결
- relatied name으로 view에서 호출하니까 정확히 써줘야함
from django.contrib.auth.models import User

class DirectorInfo(models.Model):
    owner = models.ForeignKey(User, related_name='directorInfo', 
6-2)View 수정
- 사용자별로 반환하기 위해서, 전체 테이블을 호출했던 objects.all부분을 삭제
- 인증된 사용자만 데이터를 볼 수 있도록 permission추가
- 인증된 사용자만 데이터를 생성할 수 있도록 perform_create 함수 오버라이딩
- 사용자별로 데이터를 보여주기 위해 get_queryset 오버라이딩
from rest_framework.permissions import IsAuthenticated
class directorInfoView(viewsets.ModelViewSet):
    # queryset = DirectorInfo.objects.all() # 사용자별로 데이터를 반환하기 위해 전체 queryset취소
    serializer_class = DirectorInfoSerializer
    permission_classes = [IsAuthenticated,] //인증된 사용자만 데이터를 볼 수 있도록 자격 추가

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)

    def get_queryset(self): #사용자별로 데이터를 필터링하기 위해 get_queryset 오버라이드
        user = self.request.user
        return DirectorInfo.objects.filter(owner=user)
6-3)Serializer 수정
- 각 serializer에 owner필드 추가(과정상 일부라 하긴 했는데 꼭 필요한지는 모르겠음)
class DirectorInfoSerializer(serializers.ModelSerializer):
    owner = serializers.ReadOnlyField(source='owner.username')
6-4)기타
- drf 메뉴얼에는 userlist view를 별도로 만들도록 유도함. custom user table을 사용할때 필요한 듯
from rest_framework import generics
from django.contrib.auth.models import User

class UserListView(generics.ListAPIView):
    queryset = User.objects.all()
    serializer_class = UserSerializer

- 관련해서 serializer도 만듦
from django.contrib.auth.models import User

class UserSerializer(serializers.ModelSerializer):
    directorInfo = serializers.PrimaryKeyRelatedField(many=True, queryset=DirectorInfo.objects.all())
    ficWriterInfo = serializers.PrimaryKeyRelatedField(many=True, queryset=FicWriterInfo.objects.all())
    nonFicWriterInfo = serializers.PrimaryKeyRelatedField(many=True, queryset=NonFicWriterInfo.objects.all())
    othersInfo = serializers.PrimaryKeyRelatedField(many=True, queryset=OthersInfo.objects.all())

    class Meta:
        model = User
        fields = "__all__"
- 관련에서 url도 추가
    path('users/', views.UserListView.as_view()),
- 다 구현하긴 했으나, 기본 admin을 그대로 사용하는 경우 불필요한 기능.
- jwt를 구현한 상태에선 로그인 없인 해당 부분 체크도 불가능

3.리액트를 장고의 프론트로 사용하기 - 내용추가
1) 리액트 build
- npm run build하면 대부분 잘 되지만, css와 외부에서 삽입한 js가 정상적으로 동작하지 않는 경우가 생긴다.
 . 이 build를 장고에서 그냥 실행 시 브라우저가 'MIME에러로 실행이 거부되었다'고 에러메시지 띄운다.
- css : index.html에 link태그로 삽입된 css의 경우 type='css'를 넣으면 해결 된다.
- js : 그냥 build하면 삽입된 외부 js들은 build 폴더 내의 별도 폴더에 복사된다. 이 상태에서 
django가 이를 템플릿으로 바라보게 하면, view - HttpResponse시 build/static폴더 외의 모든 파일을
content_type='text/html'로 해서 보내버린다(defualt). 이러면 외부 js파일은 호출이 되긴 하지만 
content_type(요게 결국 MIME)이 틀리므로 브라우저에서 실행이 거부된다.
 . 해결책은 'django는 build/static/에 있는 파일들의 content_type은 자동으로 맞춰 보내준다'는데서
  착안. 곧, 사용할 js파일을 수동으로 build/static폴더로 옮기고, 각 컴포넌트가 이를 바라보도록 경로 수정
 . 리액트에서 모든 테스트가 끝나면, 1 컴포넌트에 있는 외부 js파일의 호출경로를 './static/js/~~.js'로
  바꿔주고(이러면 리액트에서는 에러발생), 2 npm run build 후, 외부 js파일을 수동으로
  build/static/js 폴더로 옮겨준 뒤, 3 이 build폴더를 django에서 template으로 
  바라보도록(httpResponse)해주면 된다.
 . settings.py에 import mimetypes, mimetypes.add_type("text/javascript", ".js", True)도 하긴 함
 . CRA의 build 경로를 손본다거나, django의 HttpResponse의 content_type을 파일에 따라 다르게 주는
   방법도 생각할 수 있겠으나, 공개된 자료도 없고, 배보다 배꼽이 더 커질 확률 높음
2) django setting
- 리액트 package.json에 proxy추가("proxy": "http://localhost:8000",) 프론트에서도 3000번에 url이 없을시 8000번으로 연결됨
- npm run build를
- 이 빌드된 폴더(static파일 포함)를 장고가 볼 수 있도록 세팅
. settings.py에 아래 세팅 추가
    //템플릿 위치
    TEMPLATES = [ 
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR,'myshaman', 'build')],
            ......
        },
    ]
    //static file 위치
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR,'myshaman', 'build', 'static'),
    ] 

    //CORS세팅
    CORS_ORIGIN_WHITELIST = ( 'http://localhost:3000', 'http://127.0.0.1:3000', 'http://localhost:8000', 'http://127.0.0.1:8000' ) 추가

    //MIME오류 방지용도
    import mimetypes
    mimetypes.add_type("text/javascript", ".js", True)도 하긴 함

. 루트 url 추가(바로 보이도록)
  re_path(r'^(?:.*)/?$', views.ReactAppView.as_view()), #그외 모든 url을 리액트가 처리

. 해당 뷰를 만들어 줌. 요청이 들어오면 HttpResponse로 프론트에서 빌드한 index.html을 리턴하는 뷰.
    class ReactAppView(View): #리액트가 프론트로 기능하는 것 세팅
        def get(self, request):
            try:
                with open(os.path.join(settings.BASE_DIR,'myshaman', 'build', 'index.html')) as file:
                    return HttpResponse(file.read())
            except:
                return HttpResponse(status=501,)

- 이렇게 하면 장고(8000번)를 열면 빌드된 리액트의 프론트 단이 보임

4. heroku로 배포하기
- heroku는 PaaS로 OS나 runtime등을 고려할 필요 없이 개발자가 개발한 서비스를 그대로 올리면 된다.
그러면 웹서버, wgsi서버, DB역할까지 특별한 설정없이 고루 해준다.
 . wgsi는 gunicon을 쓰고, DB는 postgreSQL로 자동 변경된다.
 . heroku cli를 통해 git에 올려진 파일을 간단히 끌어와 적용할 수 있다.

1) staticfiles를 static_root로 몰아주기(옵션)
- python manage.py collectstatic하면 app명/staticfiles라는 곳에 모든 staticfile들이 모임
- cli로 heroku에 업로드할 때 헤로쿠가 자동으로 이 명령어를 실행하므로, 원래는 따로 할 필요 없음
- 하지만 정상적으로 정적파일들이 불러와지지 않으면 django에서 먼저 실행한 뒤, 이것도 github에 올려
  시도해볼 것
2) setting.py 수정(직접 세팅하는 방식)
- 출처 : https://zodlab.tistory.com/95
- SECRET_KEY 부분을 아래의 코드와 같이 os.environ.get 을 삽입하고 수정을 해줘야 합니다.
 . SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', '기존의 시크릿키')
- DEBUG 와 ALLOWED_HOSTS 부분을 수정합니다.
 . DEBUG = bool( os.environ.get('DJANGO_DEBUG', True) )
 . ALLOWED_HOSTS = ['myshaman.herokuapp.com'] #이 호스트만 http request가능
 . heroku cli 설치후 heroku create myshaman하면 위 url이 내 계정으로 주어짐
- .gitignore파일을 만들어주고 불필요한 파일들이 깃헙에 등록되지 않도록합니다.
 . manage.py가 있는 곳에 .gitignore파일을 만들어야 함
 . 기존 프로젝트의 ignore파일 참조.
 . myvenv는 필히 제외해야 함. 필요한 라이브러리는 requirements.txt로 해결
- 헤로쿠 서버에 배포하기 위한 필요한 라이브러리들을 설치합니다.  (DB, 웹서버 등)
 . pip install dj-database-url gunicorn psycopg2-binary whitenoise
 . dj-data~~는 django의 기본 DB인 SQLLIte대신 heroku의 기본 서버인 postgreSQL을 쓰기위한 설정
 . gunicorn은 wgsi서버
 . whitenoise는 djnago의 staticfiles middleware대신 static파일들을 제공할 웹서버 역할 
- INSTALLED_APPS, MIDDLEWEAR 부분에 설치한 라이브러리들을 등록하고 코드추가합니다.
 . MIDDLEWARE = [
	...	
	'whitenoise.middleware.WhiteNoiseMiddleware', ]
 . postgreSQL설정 
   import dj_database_url                      # 최상단에 선언부분에 입력
   db_from_env = dj_database_url.config(conn_max_age=500)   # DB 설정부분 아래에 입력
   DATABASES['default'].update(db_from_env)    # DB 설정부분 아래에 입력
- 웹서버 역할을 위한 static_root확인
 . STATIC_URL = '/static/'
 . STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
- cors를 위한 설정 추가
 . CORS_ORIGIN_WHITELIST = ( 'myshaman.herokuapp.com' ) #개발용일때와 다르게 바꿔줘야 함
 . CORS_ORIGIN_ALLOW_ALL = False #모두에게 열어줄것인가. false가 기본 설정
 . CORS_ALLOW_CREDENTIALS = True
2-1)heroku-django라이브러리를 통해 간접 설정하는 방법
 - 출처: https://dev-yakuza.posstree.com/ko/django/heroku/
 - 위 처럼 일일이 세팅하지 않고 관련 설정을 heroku-django app이 대신해주는 방식. 
 - settings.py변경(static root나 cors설정은 더 해줘야함)
   ...
   import django_heroku
   ...
   DEBUG = False
   ALLOWED_HOSTS = ['127.0.0.1', '.herokuapp.com']
   ...
   MIDDLEWARE = [
       'whitenoise.middleware.WhiteNoiseMiddleware',
       ...
   ]
   ...
   # Activate Django-Heroku.
   django_heroku.settings(locals())
3) 설치한 라이브러리 리스트로 만듭니다. (필요한 라이브러리를 헤로쿠에 알려주기 위해)
 . manage.py있는 위치에서 실행
 . pip freeze > requirements.txt
4) runtime.txt 파일 만들기 (파이썬 버전을 heroku에 알려주는 용도)
 . # python --version 버전 확인후 runtime.txt 파일 생성 후 아래와 같이 버전 입력
 . python-3.8.5      # 대소문자와 "-" 에 주의
5) Procfile파일 생성(heroku의 자동실행 명령 정도)
 - 확장자가 없는 파일임. 제일 위에 한줄만 일단 입력
  . web: gunicorn myshaman.wsgi --log-file -
6) github 에 push
7) heroku cli로 프로젝트 업로드하기
 -  heroku cli설치(devcenter.heroku.com/articles/heroku-cli)
  . 설치시 path를 설정해놓으면 vscode에서 바로 배포할 수 있음
 - heroku cli 설치가 완료 됐다면, 개발IDE 콘솔창에서 heroku 배포 명령어들을 입력합니다.
  . heroku login    
   # 헤로쿠에 로그인 
   # 로그인 명령어 입력시 새로운 창이 뜨며 인터넷창에서 로그인을 요구합니다.    
   # 로그인을 하면 자동으로 콘솔창에 로그인이 되었다고 뜹니다.
  . heroku create "생성하고싶은 서버이름"  # 내 계정으로 해당이름의 서버(app)생성
  . git push heroku master # git 에 올린 파일들을 헤로쿠에 push 
   .. 이때 처음이면 requirements를 보고 각종 라이브러리들이 설치 됨
   .. 두번째 부터는 같은 명령으로 변경사항만 update됨
   .. 에러가 있으면 deploy rejected라고 뜸. 로그를 잘 읽어보면 어디서 문제 생겼는지 추정할 수 있음
  . heroku run python manage.py migrate # 서버에 데이터베이스 등록을 위해 migrate
  . heroku run python manage.py createsuperuser  # DB 관리자 아이디 등록
 - heroku open # 어플리케이션 에러 라는 메세지가 없다면 배포성공
6) 변경사항 발생 시
 - git에 먼저 변경사항 push한 뒤,
  . git push heroku master 로 다시 적용. 변경사항들만 update됨
 - 완전히 새롭게 만들고 싶을때,
  . heroku웹페이지-내 app선택 - settings 선택 - 제일 아래로 scroll하면 app을 delete할 수 있음
  . 이러면 heroku create로 다시 만들어야 함
7) 210707 1차 수정본 배포 후 기록사항
 - setting.py의 debug는 false로 설정
 - cors whitelist가 기존에는 튜플()로 됐었는데, 이제는 []만 되고, https://를 명확하게 기록해야 적용됨
  . CORS_ORIGIN_WHITELIST = ['https://myshaman.herokuapp.com', ] 


